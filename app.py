import streamlit as st
from Utils import init_conversation, print_conversation ,StreamHandler
from langchain_community.chat_message_histories import ChatMessageHistory, RedisChatMessageHistory
from langchain_core.chat_history import BaseChatMessageHistory
from langchain_core.messages import ChatMessage
from langchain_core.runnables.history import RunnableWithMessageHistory
from langchain_core.prompts import ChatPromptTemplate, MessagesPlaceholder
from langchain_openai import ChatOpenAI
from langchain_upstage import ChatUpstage
from dotenv import load_dotenv
import os

# üåø ÏûêÏó∞ Î∞∞Í≤Ω + ÍΩÉÎ∞© Í∑úÏ†ï
background_css = """
<style>
body {
    background-image: url('https://images.unsplash.com/photo-1605296867304-46d5465a13f1?auto=format&fit=crop&w=1950&q=80');
    background-size: cover;
    background-attachment: fixed;
    background-repeat: no-repeat;
    color: #2e2e2e;
    font-family: 'Nanum Pen Script', cursive;
    display: flex;
    justify-content: center;
}
main.block-container {
    max-width: 800px;
    margin: auto;
    padding: 2rem;
    background-color: rgba(255, 255, 255, 0.92);
    border-radius: 25px;
    box-shadow: 0 0 20px rgba(180, 240, 180, 0.5);
    border: 5px double #c5e1a5;
    background-image: url('https://www.transparenttextures.com/patterns/floral-white.png');
    background-blend-mode: lighten;
}
div.stChatMessage {
    background-color: rgba(255, 255, 255, 0.96) !important;
    border: 3px solid #81c784;
    padding: 1.3rem !important;
    border-radius: 20px !important;
    margin-bottom: 1.5rem !important;
    background-image: url('https://www.transparenttextures.com/patterns/flower.png');
    background-blend-mode: lighten;
    font-size: 1.1rem;
    backdrop-filter: blur(2px);
    box-shadow: 0 0 12px rgba(140, 200, 140, 0.5);
}
</style>
"""
st.set_page_config(page_title="SSAC_TALK", page_icon="üçÄ")
background_css = """
<style>
body {
    background-image: url('https://images.unsplash.com/photo-1505843513577-22bb7d21e455?auto=format&fit=crop&w=1950&q=80');
    background-size: cover;
    background-attachment: fixed;
    background-repeat: no-repeat;
    color: #2c2c2c;
    font-family: 'Nanum Myeongjo', serif;
    display: flex;
    justify-content: center;
}
main.block-container {
    max-width: 850px;
    margin: auto;
    padding: 2rem;
    background-color: rgba(255, 255, 255, 0.9);
    border-radius: 20px;
    box-shadow: 0 0 30px rgba(200, 180, 255, 0.5);
    border: 6px double #e1bee7;
    background-image: url('https://www.transparenttextures.com/patterns/garden.png');
    background-blend-mode: lighten;
}
div.stChatMessage {
    background-color: rgba(255, 255, 255, 0.95) !important;
    border: 2px solid #ce93d8;
    padding: 1.2rem !important;
    border-radius: 16px !important;
    margin-bottom: 1.2rem !important;
    background-image: url('https://www.transparenttextures.com/patterns/flower.png');
    background-blend-mode: lighten;
    font-size: 1.1rem;
    backdrop-filter: blur(2px);
    box-shadow: 0 0 12px rgba(180, 120, 220, 0.5);
}
</style>
"""
st.markdown(background_css, unsafe_allow_html=True)
st.markdown(background_css, unsafe_allow_html=True)
st.title("üå∏‚ú®üíéüçÄ ÏÉàÏãπÎ¥á üçÄüíé‚ú®üå∏")
st.caption("ÎãπÏã†Ïùò Ïù¥ÏïºÍ∏∞Î•º Îì§Ïñ¥Ï£ºÎäî ÏûîÏûîÌïú ÎåÄÌôî ÏπúÍµ¨ÏûÖÎãàÎã§ üåø")

load_dotenv()
REDIS_URL = "redis://localhost:6379/0"
os.environ["LANGCHAIN_TRACING_V2"] = "true"
os.environ["LANGCHAIN_PROJECT"] = "RunnableWithMessageHistory"

if "store" not in st.session_state:
    st.session_state["store"] = dict()

def get_reids_message_history(session_id: str) -> RedisChatMessageHistory:
    return RedisChatMessageHistory(session_id, url=REDIS_URL)

with st.sidebar:
    session_id = st.text_input("ÏÑ∏ÏÖò ID Ï†ÅÏñ¥Î≥¥ÏßÄ~", value="ssac0724")
    clear_space = st.button("ÏßÄÎÇú Í∏∞Î°ù ÏÇ≠Ï†úÌï†ÍπåÏöî?")
    if clear_space:
        st.session_state["messages"] = []
        st.rerun()

init_conversation()
print_conversation()

def get_session_history(session_id: str) -> BaseChatMessageHistory:
    if session_id not in st.session_state["store"]:
        st.session_state["store"][session_id] = ChatMessageHistory()
    return st.session_state["store"][session_id]

if user_input := st.chat_input("Í∂ÅÍ∏àÏ¶ùÏùÑ ÌíÄÏñ¥ÎìúÎ¶ΩÎãàÎã§"):
    st.chat_message("user").write(user_input)
    st.session_state["messages"].append(ChatMessage(role="user", content=user_input))

    with st.chat_message("assistant"):
        stream_handler = StreamHandler(st.empty())
        llm = ChatUpstage(
            streaming=True,
            callbacks=[stream_handler],
            model='solar-1-mini-chat'
        )

        prompt = ChatPromptTemplate.from_messages([
    (
        "system",
        '''
        ÎÑàÎäî ÏπúÏ†àÌïòÍ≥† Ï∞®Î∂ÑÌïú ÎåÄÌôî ÏπúÍµ¨Ïïº. ÏÇ¨Ïö©ÏûêÍ∞Ä ÌïòÎäî ÏßàÎ¨∏Ïù¥ÎÇò Í≥†ÎØºÏóê ÎåÄÌï¥ ÎÑàÎ¨¥ Í∏∏ÏßÄ ÏïäÍ≤å Îî∞ÎúªÌïòÍ≥† Î™ÖÌôïÌïòÍ≤å ÎåÄÎãµÌï¥Ï§ò.
        Ï§ëÎ≥µÎêòÍ±∞ÎÇò Î∂ÄÏûêÏó∞Ïä§Îü¨Ïö¥ ÎßêÌà¨Îäî ÌîºÌïòÍ≥†, Í≥µÍ∞êÍ≥º Ìï®Íªò ÏûêÏó∞Ïä§ÎüΩÍ≥† ÏùºÍ¥ÄÎêú ÎßêÌà¨Î°ú ÏùëÎãµÌï¥Ï§ò.
        ÎÑàÎ¨¥ Ï†ïÏ§ëÌïòÍ±∞ÎÇò Îî±Îî±ÌïòÍ≤å Íµ¥ÏßÄ ÎßêÍ≥†, ÏπúÍµ¨Ï≤òÎüº Ïù¥ÏïºÍ∏∞ÌïòÎìØÏù¥ ÎßêÌï¥.
        '''
    ),
    MessagesPlaceholder(variable_name="history"),
    ("human", "{question}"),
])

        runnable = prompt | llm

        chain_with_memory = RunnableWithMessageHistory(
            runnable=runnable,
            get_session_history=get_reids_message_history,
            input_messages_key="question",
            history_messages_key="history",
        )

        response = chain_with_memory.invoke(
            {"question": user_input},
            config={"configurable": {"session_id": session_id}},
        )

        response_text = response.content
        forbidden_phrases = [
            "ÏïÑ, ÎØ∏ÏïàÌï¥Ïöî",
            "Îçî Î∂ÄÎìúÎüΩÍ≤å ÎßêÌï¥Î≥ºÍ≤åÏöî",
            "ÏïÑ, Îçî Ï†ïÏ§ëÌïòÍ≤å ÎßêÌï¥Î≥ºÍ≤åÏöî",
            "Ï£ÑÏÜ°Ìï¥Ïöî",
            "Ï∂îÏ≤úÎìúÎ¶¨Í≥† Ïã∂Ïñ¥Ïöî",
            "ÎèÑÏõÄÏù¥ ÎêòÏóàÏúºÎ©¥ Ï¢ãÍ≤†Ïñ¥Ïöî",
            "Í∏∏Í≤å ÏÑ§Î™ÖÌï¥Î≥ºÍ≤åÏöî",
            "ÌïúÎ≤à Îçî ÎßêÌï¥Î≥ºÍ≤åÏöî",
            "ÌïúÎ≤à Îçî ÏïåÎ†§ÎìúÎ¶¥Í≤åÏöî"
        ]
        for phrase in forbidden_phrases:
                response_text = response_text.replace(phrase, "")

        cut_points = ["ÏïÑ, ÎØ∏ÏïàÌï¥Ïöî", "ÏïÑ, Îçî Ï†ïÏ§ëÌïòÍ≤å ÎßêÌï¥Î≥ºÍ≤åÏöî"]
        for phrase in cut_points:
            if phrase in response_text:
                response_text = response_text.split(phrase)[0].strip()
                break

        if len(response_text) > 200:
            response_text = response_text[:200].rsplit('.', 1)[0].strip() + "."

        

        st.session_state["messages"].append(ChatMessage(role="assistant", content=response_text))